// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4849.BasicRobot;

import org.usfirst.frc4849.BasicRobot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick extreme3dpro;
    public Joystick leftjoy;
    public Joystick rightjoy;
    public Joystick gamepad;
    public DigitalOutput digOUt;
    public DigitalInput swith;
    public Encoder lazySusanEncoder;
    public Encoder lSE;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        rightjoy = new Joystick(3);
        
        leftjoy = new Joystick(2);
        
        extreme3dpro = new Joystick(1);
        
        gamepad = new Joystick(4);
        
        digOUt = new DigitalOutput(1);
        
        swith = new DigitalInput(2);
        
        lazySusanEncoder = new Encoder(1, 2, false, EncodingType.k4X);
        
        lSE = lazySusanEncoder;
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("DriveSequence", new DriveSequence());
        
        SmartDashboard.putNumber("LazySusanEncoder", lSE.get());
        
        SmartDashboard.putNumber("BatteryLevel", DriverStation.getInstance().getBatteryVoltage());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getextreme3dpro() {
        return extreme3dpro;
    }

    public Joystick getleftjoy() {
        return leftjoy;
    }

    public Joystick getrightjoy() {
        return rightjoy;
    }
    
    public Joystick getgamepad() {
        return gamepad;
    }
    
    public DigitalOutput getDigitalOutput() {
        return digOUt;
    }
    
    public DigitalInput getDigitalInput2() {
        return swith;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

